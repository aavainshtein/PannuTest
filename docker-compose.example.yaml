version: '3.6'

services:
  #rabbit
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672' # RabbitMQ Management UI
    volumes:
      - ./backend/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    environment:
      RABBITMQ_SERVER_START_ARGS: '--load-definitions=/etc/rabbitmq/definitions.json'

  #stripe-mock
  stripe-mock:
    image: stripe/stripe-mock
    expose:
      - 12111
    ports:
      - 12111:12111

  #fastapi
  fastapi:
    build: ./backend/fastapi
    depends_on:
      - rabbitmq
    restart: always
    volumes:
      - ./backend/fastapi/:/app/
    ports:
      - 8001:8000
    environment:
      - MODULE_NAME=main
      - PORT=8000

  # backend
  postgres:
    image: postgres
    restart: always
    volumes:
      - ./backend/postgres/_volumes/data:/var/lib/postgresql/data
      - ./backend/postgres/initdb.d:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  hasura:
    image: hasura/graphql-engine:v2.42.0
    depends_on:
      - postgres
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_DEV_MODE: true
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      FUNCTIONS_URL: FUNCTIONS_SERVER_URL
    expose:
      - 8080 # for graphql-codegen
    ports:
      - 8080:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-hasura.rule=Host(`${HASURA_HOST}`) && PathPrefix(`/`)
      - traefik.http.services.${PROJECT_NAME}-hasura.loadbalancer.server.port=8080
      - traefik.http.routers.${PROJECT_NAME}-hasura.tls=true
      - traefik.http.routers.${PROJECT_NAME}-hasura.tls.certresolver=letsencrypt

  auth:
    image: nhost/hasura-auth
    depends_on:
      - postgres
      - hasura
    restart: always
    volumes:
      - ./backend/auth/email-templates:/app/email-templates:ro
    environment:
      AUTH_HOST: '0.0.0.0'
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_GRAPHQL_URL: http://hasura:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      AUTH_SERVER_URL: ${AUTH_SERVER_URL}
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL}
      AUTH_SMTP_HOST: ${AUTH_SMTP_HOST}
      AUTH_SMTP_PORT: ${AUTH_SMTP_PORT}
      AUTH_SMTP_USER: ${AUTH_SMTP_USER}
      AUTH_SMTP_PASS: ${AUTH_SMTP_PASS}
      AUTH_SMTP_SENDER: ${AUTH_SMTP_SENDER}
      AUTH_GRAVATAR_DEFAULT: ${AUTH_GRAVATAR_DEFAULT}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-auth.rule=Host(`${AUTH_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-auth.loadbalancer.server.port=4000
      - traefik.http.routers.${PROJECT_NAME}-auth.tls=true
      - traefik.http.routers.${PROJECT_NAME}-auth.tls.certresolver=letsencrypt

  functions:
    image: nhost/functions:1
    depends_on:
      - rabbitmq
    restart: always
    volumes:
      - ./backend/functions:/opt/project/functions
      # - .:/opt/project
      # - functions_node_modules:/opt/project/node_modules
    environment:
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      HASURA_GRAPHQL_GRAPHQL_URL: http://hasura:8080/v1/graphql
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
    expose:
      - 3000
    ports:
      - 3000:3000
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-functions.rule=Host(`${FUNCTIONS_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-functions.loadbalancer.server.port=3000
      - traefik.http.routers.${PROJECT_NAME}-functions.tls=true
      - traefik.http.routers.${PROJECT_NAME}-functions.tls.certresolver=letsencrypt
  #
